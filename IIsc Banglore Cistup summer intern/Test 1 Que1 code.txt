#!/usr/bin/env python
# coding: utf-8

# In[55]:


import pandas as pd

import numpy as np 

import datetime


# In[56]:


df=pd.read_csv("bike_data_new.csv")


# In[57]:


df


# # 1. Write a function that removes all trips of duration 0 minutes and prints the following values on the
# 

# In[58]:


def removeall_trips_zero_duration(df):
    start_time = datetime.datetime.now()
    
    # Remove trips with duration of 0 minutes
    df = df[df['ended_at'] != df['started_at']]
    
    
    # Calculate Maximum and minimum duration of the trip (in minutes).
    
    trip_durations = (pd.to_datetime(df['ended_at']) - pd.to_datetime(df['started_at'])).dt.total_seconds() / 60.0
    max_duration = trip_durations.max()
    min_duration = trip_durations.min()
    
    
    # Calculate Total number of trips corresponding to the minimum duration.
    num_min_duration_trips = (trip_durations == min_duration).sum()
    
   

 #Calculate Percentage of total circular trips. A trip is defined as circular if it starts and ends at the same location.
    circular_trips = (df['start_lat'] == df['end_lat']) & (df['start_lng'] == df['end_lng'])
    perct_circular_trips = (circular_trips.sum() / len(df)) * 100.0
    
    end_time = datetime.datetime.now()
    total_runtime = (end_time - start_time).total_seconds()
    
    print(f"Maximum duration of the trip (in minutes): {max_duration}")
    print(f"Minimum duration of the trip (in minutes): {min_duration}")
    print(f"Total number of trips corresponding to the minimum duration: {num_min_duration_trips}")
    print(f"Percentage of total circular trips: {perct_circular_trips}%")
    print(f"Total runtime for the function: {total_runtime} seconds")
    
    return df


# In[59]:


removeall_trips_zero_duration(df)


# # 2. Filter the original dataset to include only the trips starting between 06:00 AM and 06:00 PM.

# In[60]:


def find_feasible_pairs(df):
    start_time = datetime.datetime.now()

    # Filter the dataset to include only the trips starting between 06:00 AM and 06:00 PM
    df = df[(df['started_at'].dt.hour >= 6) & (df['started_at'].dt.hour < 18)]
    

    # Create a new column 'end_location' 
    df['end_location'] = list(zip(df['end_lat'], df['end_lng']))

    
    # Create a dictionary 
    end_location_dict = {}
    for index, row in df.iterrows():
        if row['end_location'] in end_location_dict:
            end_location_dict[row['end_location']].append(row['trip_id'])
        else:
            end_location_dict[row['end_location']] = [row['trip_id']]
            

    # Loop over each trip
    feasible_pairs = 0
    for index, row in df.iterrows():
        end_location = row['end_location']
        end_time = row['ended_at']
        if end_location in end_location_dict:
            for trip_id in end_location_dict[end_location]:
                if row['trip_id'] != trip_id:
                    start_time = df.loc[df['trip_id'] == trip_id, 'started_at'].iloc[0]
                    if start_time >= end_time:
                        feasible_pairs += 1

    end_time = datetime.datetime.now()
    total_runtime = (end_time - start_time).total_seconds()

    # Print the results
    print(f"Total feasible pairs of trips: {feasible_pairs}")
    print(f"Total runtime for the function: {total_runtime:.2f} seconds")

    return feasible_pairs


# In[61]:


df['started_at'] = pd.to_datetime(df['started_at'])
df['ended_at'] = pd.to_datetime(df['ended_at'])


# In[62]:


find_feasible_pairs(df)


# # 3. Filter the original dataset to include only the first 100 trips (i.e., trip id 1 to 100).

# In[ ]:





# In[19]:


# Filter the first 100 trips
df = df[df['trip_id'] <= 100]

# Find the number of unique depots used
unique_depots = pd.concat([df[['start_lat', 'start_lng']], df[['end_lat', 'end_lng']]]).drop_duplicates()
num_depots = len(unique_depots)

print("Number of unique depots used:", num_depots)


# In[ ]:





# In[ ]:




